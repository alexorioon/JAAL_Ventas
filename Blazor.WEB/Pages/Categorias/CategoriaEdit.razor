@page "/categorias/edit/{Id:int}"
@using Blazor.WEB.Repositories;
@using Sales.Shared.Entities;
@inject IRepository repository
@inject NavigationManager navigationManager
@inject SweetAlertService sweetAlertService

<h3>Editar Categoría</h3>

@if (categoria is null)
{
    <p> Cargando...</p>
}
else
{
    <CategoriaForm @ref="categoriaForm" Categoria="categoria" OnValidSubmit="EditAsync" ReturnAction="Return" />
}

@code {

    private Categoria? categoria;
    private CategoriaForm? categoriaForm;

    [Parameter]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        var responseHttp = await repository.Get<Categoria>($"/api/categorias/{Id}");
        if (responseHttp.Error)
        {
            if (responseHttp.HttpResponseMessage.StatusCode == HttpStatusCode.NotFound)
            {
                navigationManager.NavigateTo("/categorias");
                return;
            }
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        categoria = responseHttp.Response;
    }
    private async Task EditAsync()
    {
        var responseHttp = await repository.Put("api/categorias/", categoria);

        if (responseHttp.Error)
        {
            var message = await responseHttp.GetErrorMessageAsync();
            await sweetAlertService.FireAsync("Error", message, SweetAlertIcon.Error);
            return;
        }
        categoriaForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/categorias");
    }

    private void Return()
    {
        categoriaForm!.FormPostedSuccessfully = true;
        navigationManager.NavigateTo("/categorias");
    }

}